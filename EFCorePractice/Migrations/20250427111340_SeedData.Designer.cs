// <auto-generated />
using System;
using EFCorePractice.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCorePractice.Migrations
{
    [DbContext(typeof(CinemaDbContext))]
    [Migration("20250427111340_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCorePractice.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsForLoyalClients")
                        .HasColumnType("bit");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Spring Sale",
                            IsForLoyalClients = false,
                            Percentage = 0.1m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Loyalty Discount",
                            IsForLoyalClients = true,
                            Percentage = 0.15m
                        });
                });

            modelBuilder.Entity("EFCorePractice.Entities.Hall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Halls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 100,
                            Number = 0,
                            Type = "Standart"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 50,
                            Number = 0,
                            Type = "VIP"
                        });
                });

            modelBuilder.Entity("EFCorePractice.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgeRestriction")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeRestriction = 13,
                            Description = "A thief who steals corporate secrets through dream-sharing technology.",
                            Director = "Christopher Nolan",
                            Duration = new TimeSpan(0, 2, 28, 0, 0),
                            Genre = "Sci-Fi",
                            ReleaseYear = 2010,
                            Title = "Inception"
                        },
                        new
                        {
                            Id = 2,
                            AgeRestriction = 16,
                            Description = "A hacker discovers reality is a simulation.",
                            Director = "The Wachowskis",
                            Duration = new TimeSpan(0, 2, 16, 0, 0),
                            Genre = "Action",
                            ReleaseYear = 1999,
                            Title = "The Matrix"
                        });
                });

            modelBuilder.Entity("EFCorePractice.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("UserId");

                    b.ToTable("Sales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiscountId = 2,
                            PurchaseDate = new DateTime(2025, 4, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            TotalPrice = 300m,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("EFCorePractice.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HallId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.HasIndex("MovieId");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HallId = 1,
                            MovieId = 1,
                            StartTime = new DateTime(2025, 4, 15, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            TicketPrice = 150m
                        },
                        new
                        {
                            Id = 2,
                            HallId = 2,
                            MovieId = 2,
                            StartTime = new DateTime(2025, 4, 15, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active",
                            TicketPrice = 200m
                        });
                });

            modelBuilder.Entity("EFCorePractice.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SaleId")
                        .HasColumnType("int");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.HasIndex("SessionId");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Price = 150m,
                            SaleId = 1,
                            SeatNumber = "A1",
                            SessionId = 1,
                            Status = "Purchased"
                        },
                        new
                        {
                            Id = 2,
                            Price = 150m,
                            SaleId = 1,
                            SeatNumber = "A2",
                            SessionId = 1,
                            Status = "Purchased"
                        });
                });

            modelBuilder.Entity("EFCorePractice.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BonusPoints")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BonusPoints = 0,
                            Email = "admin@cinema.com",
                            Name = "Admin",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            BonusPoints = 120,
                            Email = "olga@gmail.com",
                            Name = "Olga",
                            Role = "Client"
                        });
                });

            modelBuilder.Entity("EFCorePractice.Entities.Sale", b =>
                {
                    b.HasOne("EFCorePractice.Entities.Discount", "Discount")
                        .WithMany("Sales")
                        .HasForeignKey("DiscountId");

                    b.HasOne("EFCorePractice.Entities.User", "User")
                        .WithMany("Sales")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFCorePractice.Entities.Session", b =>
                {
                    b.HasOne("EFCorePractice.Entities.Hall", "Hall")
                        .WithMany("Sessions")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCorePractice.Entities.Movie", "Movie")
                        .WithMany("Sessions")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hall");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("EFCorePractice.Entities.Ticket", b =>
                {
                    b.HasOne("EFCorePractice.Entities.Sale", "Sale")
                        .WithMany("Tickets")
                        .HasForeignKey("SaleId");

                    b.HasOne("EFCorePractice.Entities.Session", "Session")
                        .WithMany("Tickets")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sale");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("EFCorePractice.Entities.Discount", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("EFCorePractice.Entities.Hall", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("EFCorePractice.Entities.Movie", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("EFCorePractice.Entities.Sale", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("EFCorePractice.Entities.Session", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("EFCorePractice.Entities.User", b =>
                {
                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
